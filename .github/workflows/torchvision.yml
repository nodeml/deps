name: Build TorchVision

on:
  workflow_dispatch:
    inputs:
      torch_version:
        description: "The Torch version to build"
        required: true
        type: string
        default: "2.1.0"
      torchvision_version:
        description: "The TorchVision version to build"
        required: true
        type: string
        default: "0.16.0"
      cuda:
        description: "Cuda Enabled ?"
        required: true
        type: choice
        default: "OFF"
        options:
        - "ON"
        - "OFF"


jobs:
  build:
    permissions: write-all
    runs-on: ${{ matrix.os }}
    env:
      working-dir: torchvision
      cuda_on: "ON"

    strategy:
      matrix:
        os: [windows-latest]
        # os: [windows-latest,ubuntu-latest]
        python-version: ["3.9"]
        include:
          # - os: ubuntu-latest
          #   platform_short: linux
          #   platform_long: Linux
          - os: windows-latest
            platform_short: win
            platform_long: Windows

    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      - run: conda install -c conda-forge libjpeg-turbo libpng openjpeg

      - name: Install Cuda 11.8
        if: ${{ inputs.cuda == env.cuda_on }}
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: '11.8.0'
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev","nvToolsExt", "thrust", "visual_studio_integration"]'


      - run: cmake . -Bbuild -DCUDA_PATH="${{steps.cuda-toolkit.outputs.CUDA_PATH}}" -DPYTORCH_VERSION="${{ inputs.torch_version }}" -DPYTORCH_VISION_VERSION="${{ inputs.torchvision_version }}" -DWITH_CUDA=${{ inputs.cuda }} --config Release
        working-directory: ${{ env.working-dir }}

      - run: ls torchvision

      - uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: '${{ env.working-dir }}.zip'
          path: '${{ env.working-dir }}/*'
          directory: ${{ env.working-dir }}
      
      - run: ls torchvision

      - name: Cuda Release
        if: ${{ inputs.cuda == env.cuda_on }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.working-dir }}-${{ matrix.platform_short }}-${{ inputs.torch_version }}-${{ inputs.torchvision_version }}-cuda"
          prerelease: false
          title: "TorchVision ${{ inputs.torch_version }} ${{ inputs.torchvision_version }} Cuda ${{ matrix.platform_long }}"
          files: |
            **/torchvision/torchvision.zip

      - name: Cpu Release
        if: ${{ inputs.cuda != env.cuda_on }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.working-dir }}-${{ matrix.platform_short }}-${{ inputs.torch_version }}-${{ inputs.torchvision_version }}-cpu"
          prerelease: false
          title: "TorchVision ${{ inputs.torch_version }} ${{ inputs.torchvision_version }} Cpu ${{ matrix.platform_long }}"
          files: |
            **/${{ env.working-dir }}/${{ env.working-dir }}.zip
          
      - run: ls torchvision
        